= REST in Firewater =

Firewater is an implementation of the [http://en.wikipedia.org/wiki/Representational_State_Transfer REST architectural style (Representational State Transfer)].

Central to the REST architecture is that all Resources are uniquely accessible using a standard URL notation.  So if your application included Pet, Owner and Store resources, the following URL patterns would likely be present:

{{{
    http://someserver.com/myapp/owners/123
    http://someserver.com/myapp/pets/3434
    http://someserver.com/myapp/pets/3434/owner
}}}

The numbers in the above URLs indicate a unique id for that resource.  Notice how traversal of the resource tree is possible - the URL `http://someserver.com/myapp/pets/3434/owner` refers to the Owner resource of Pet with id=3434.

When making a Request for a Resource (using the URL), you specify one HTTP Method operation to specify what you want to do to that Resource:
  * GET - fetches an existing resource
  * PUT - creates a new resource
  * POST - updates an existing resource
  * DELETE - deletes an existing resource
  * HEAD - performs a GET without including actual content in the response
  * OPTIONS - retrieve meta-data about a resource

Because most web application servers and network infrastructure has traditionally supported only the GET and POST methods, a simple convention for specifying the HTTP Method to the Firewater is to use the `_method` parameter on the incoming URL specifiying the _actual_ method that is requested.  See FirewaterExamples for more information.

Additional arguments can be specified in the Request - these can be used for property fields  (for PUT and POST), or for filters, sorting and pagination (for GET).

The processing of a REST Request will result in a Response.  The Response specifies a Status, a Media Type and the actual content payload that fulfills the Request.  Again all of these conventions borrow existing HTTP infrastructure and apply them to web service resources.

The [http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html Response Status Code] is a simple integer that indicates a number of different server or client side conditions.  Here are some common ones:
  * 200 - Request OK
  * 401 - Invalid Authentication
  * 403 - Access Denied
  * 404 - Not Found
  * 405 - Method Not Allowed
  * 500 - General Server Error

The [http://www.iana.org/assignments/media-types/ Media Type] of the response is it's HTTP Mime Type.  This is a string that describes the format of the content.  Some common media type examples are:
  * text/plain - plain text :)
  * text/html 
  * application/xml
  * image/jpeg

The REST architecture stops short of defining a format for the response content.  Check out the FirewaterResponsePage for the response format generated by Firewater.